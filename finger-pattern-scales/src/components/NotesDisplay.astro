---

type Props = {
  joinedId: string,
  notes: string,
  offset: number
}
const { joinedId, notes, offset } = Astro.props;
---
<script>
import { renderAbc, type ClickListenerAnalysis, type AbcElem } from 'abcjs';
import Alpine from 'alpinejs';

class NotesDisplay extends HTMLElement {
  offset: number = 0;

  constructor() {
    super();

    this.offset = parseInt(this.dataset.offset || '0', 10);

    if (!this.dataset.notes) {
      console.error("NotesDisplay requires notes");
      return;
    }

    renderAbc(this.id, this.dataset.notes, {
      scale: 1.1,
      add_classes: true,
      clickListener: this.onNoteClick.bind(this),
      paddingleft: 0,
      paddingright: 0,
      paddingbottom: 0,
      paddingtop: 0,
    });

  }

  onNoteClick(abcElem: AbcElem) {
    for (let el of abcElem.abselem.elemset) {
      if (!el.classList.contains('abcjs-note')) {
        return;
      }
      const regex = /abcjs-n(\d+)/;
      const match = regex.exec(el.className.baseVal);
      if (!match) {
        return;
      }
      const noteIdx = parseInt(match[1], 10);

      let joinedId = Math.floor((noteIdx - this.offset) / 4);
      let fingerNumber = (noteIdx - this.offset) % 4;
      if (fingerNumber === 0) {
        joinedId--;
        fingerNumber = 4;
      }
      Alpine.store('activeFinger').setActiveFinger(`${joinedId}`, fingerNumber);
    }
  }
  
  // updateHighlightedNote() {
  //   if (!Alpine.store('activeFinger').joinedId) {
  //     return;
  //   }
  //   if (!Alpine.store('activeFinger').fingerNumber) {
  //     return;
  //   }
  //
  //   const joinedId = parseInt(Alpine.store('activeFinger').joinedId, 10);
  //   const fingerNumber = parseInt(Alpine.store('activeFinger').fingerNumber, 10);
  //   const noteNumber = joinedId * 4 + fingerNumber + this.offset;
  //   this.querySelectorAll('.abcjs-note_selected').forEach(el => el.classList.remove('abcjs-note_selected'));
  //   this.querySelector(`.abcjs-n${noteNumber}`)?.classList.add('abcjs-note_selected');
  // }

}

function updateHighlightedNote(nd: NotesDisplay) {
    if (!Alpine.store('activeFinger').joinedId) {
      return;
    }
    if (!Alpine.store('activeFinger').fingerNumber) {
      return;
    }

    const joinedId = parseInt(Alpine.store('activeFinger').joinedId, 10);
    const fingerNumber = parseInt(Alpine.store('activeFinger').fingerNumber, 10);
    const noteNumber = joinedId * 4 + fingerNumber + nd.offset;
    nd.querySelectorAll('.abcjs-note_selected').forEach(el => el.classList.remove('abcjs-note_selected'));
    nd.querySelector(`.abcjs-n${noteNumber}`)?.classList.add('abcjs-note_selected');
}

customElements.define('notes-display', NotesDisplay);
</script>

<notes-display 
  id={joinedId + "-notes"} 
  class="notes" 
  data-notes={notes} 
  class="-pl-2" 
  data-offset={offset}
  x-data
  x-init="$watch('$store.activeFinger', $store.activeFinger.updateHighlightedNote.bind($el))"
></notes-display>

<style is:global>
  .notes {
    cursor: pointer;
  }

  .print-mode .notes {
    cursor: default;
  }

  .abcjs-note {
    fill: #000000;
    cursor: pointer;
  }

  .abcjs-staff {
    fill: #000000;
  }

  .abcjs-note_selected {
    fill: #ae00bf;
  }

  .print-mode .abcjs-note_selected {
    fill: #000000;
  }

  .raised {
    background-color: white;
  }
</style>
